/*
Cube Iridium HTTP API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
Contact: support@cube.exchange
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UsersWithdrawPost200ResponseResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsersWithdrawPost200ResponseResult{}

// UsersWithdrawPost200ResponseResult struct for UsersWithdrawPost200ResponseResult
type UsersWithdrawPost200ResponseResult struct {
	// The status of the external KYT check
	Status string `json:"status"`
	// Whether the withdrawal was approved by the system
	Approved NullableBool `json:"approved,omitempty"`
	// The reason for the withdrawal being rejected
	Reason NullableString `json:"reason,omitempty"`
}

type _UsersWithdrawPost200ResponseResult UsersWithdrawPost200ResponseResult

// NewUsersWithdrawPost200ResponseResult instantiates a new UsersWithdrawPost200ResponseResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersWithdrawPost200ResponseResult(status string) *UsersWithdrawPost200ResponseResult {
	this := UsersWithdrawPost200ResponseResult{}
	this.Status = status
	return &this
}

// NewUsersWithdrawPost200ResponseResultWithDefaults instantiates a new UsersWithdrawPost200ResponseResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersWithdrawPost200ResponseResultWithDefaults() *UsersWithdrawPost200ResponseResult {
	this := UsersWithdrawPost200ResponseResult{}
	return &this
}

// GetStatus returns the Status field value
func (o *UsersWithdrawPost200ResponseResult) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *UsersWithdrawPost200ResponseResult) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *UsersWithdrawPost200ResponseResult) SetStatus(v string) {
	o.Status = v
}

// GetApproved returns the Approved field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsersWithdrawPost200ResponseResult) GetApproved() bool {
	if o == nil || IsNil(o.Approved.Get()) {
		var ret bool
		return ret
	}
	return *o.Approved.Get()
}

// GetApprovedOk returns a tuple with the Approved field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsersWithdrawPost200ResponseResult) GetApprovedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Approved.Get(), o.Approved.IsSet()
}

// HasApproved returns a boolean if a field has been set.
func (o *UsersWithdrawPost200ResponseResult) HasApproved() bool {
	if o != nil && o.Approved.IsSet() {
		return true
	}

	return false
}

// SetApproved gets a reference to the given NullableBool and assigns it to the Approved field.
func (o *UsersWithdrawPost200ResponseResult) SetApproved(v bool) {
	o.Approved.Set(&v)
}
// SetApprovedNil sets the value for Approved to be an explicit nil
func (o *UsersWithdrawPost200ResponseResult) SetApprovedNil() {
	o.Approved.Set(nil)
}

// UnsetApproved ensures that no value is present for Approved, not even an explicit nil
func (o *UsersWithdrawPost200ResponseResult) UnsetApproved() {
	o.Approved.Unset()
}

// GetReason returns the Reason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsersWithdrawPost200ResponseResult) GetReason() string {
	if o == nil || IsNil(o.Reason.Get()) {
		var ret string
		return ret
	}
	return *o.Reason.Get()
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsersWithdrawPost200ResponseResult) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reason.Get(), o.Reason.IsSet()
}

// HasReason returns a boolean if a field has been set.
func (o *UsersWithdrawPost200ResponseResult) HasReason() bool {
	if o != nil && o.Reason.IsSet() {
		return true
	}

	return false
}

// SetReason gets a reference to the given NullableString and assigns it to the Reason field.
func (o *UsersWithdrawPost200ResponseResult) SetReason(v string) {
	o.Reason.Set(&v)
}
// SetReasonNil sets the value for Reason to be an explicit nil
func (o *UsersWithdrawPost200ResponseResult) SetReasonNil() {
	o.Reason.Set(nil)
}

// UnsetReason ensures that no value is present for Reason, not even an explicit nil
func (o *UsersWithdrawPost200ResponseResult) UnsetReason() {
	o.Reason.Unset()
}

func (o UsersWithdrawPost200ResponseResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsersWithdrawPost200ResponseResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	if o.Approved.IsSet() {
		toSerialize["approved"] = o.Approved.Get()
	}
	if o.Reason.IsSet() {
		toSerialize["reason"] = o.Reason.Get()
	}
	return toSerialize, nil
}

func (o *UsersWithdrawPost200ResponseResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUsersWithdrawPost200ResponseResult := _UsersWithdrawPost200ResponseResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUsersWithdrawPost200ResponseResult)

	if err != nil {
		return err
	}

	*o = UsersWithdrawPost200ResponseResult(varUsersWithdrawPost200ResponseResult)

	return err
}

type NullableUsersWithdrawPost200ResponseResult struct {
	value *UsersWithdrawPost200ResponseResult
	isSet bool
}

func (v NullableUsersWithdrawPost200ResponseResult) Get() *UsersWithdrawPost200ResponseResult {
	return v.value
}

func (v *NullableUsersWithdrawPost200ResponseResult) Set(val *UsersWithdrawPost200ResponseResult) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersWithdrawPost200ResponseResult) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersWithdrawPost200ResponseResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersWithdrawPost200ResponseResult(val *UsersWithdrawPost200ResponseResult) *NullableUsersWithdrawPost200ResponseResult {
	return &NullableUsersWithdrawPost200ResponseResult{value: val, isSet: true}
}

func (v NullableUsersWithdrawPost200ResponseResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersWithdrawPost200ResponseResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


