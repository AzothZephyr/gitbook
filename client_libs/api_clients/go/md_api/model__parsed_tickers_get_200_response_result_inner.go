/*
Cube Mendelev HTTP API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
Contact: support@cube.exchange
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ParsedTickersGet200ResponseResultInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParsedTickersGet200ResponseResultInner{}

// ParsedTickersGet200ResponseResultInner struct for ParsedTickersGet200ResponseResultInner
type ParsedTickersGet200ResponseResultInner struct {
	TickerId string `json:"ticker_id"`
	BaseCurrency string `json:"base_currency"`
	QuoteCurrency string `json:"quote_currency"`
	// The millisecond timestamp of the latest update.
	Timestamp int32 `json:"timestamp"`
	// The last traded price. Also equal to the 24-hour closing price
	LastPrice NullableFloat64 `json:"last_price,omitempty"`
	// The rolling 24-hour volume in the base currency.
	BaseVolume float64 `json:"base_volume"`
	// The rolling 24-hour volume in the quote currency.
	QuoteVolume float64 `json:"quote_volume"`
	Bid NullableFloat64 `json:"bid,omitempty"`
	Ask NullableFloat64 `json:"ask,omitempty"`
	// The rolling 24-hour highest price.
	High NullableFloat64 `json:"high,omitempty"`
	// The rolling 24-hour lowest price.
	Low NullableFloat64 `json:"low,omitempty"`
	// The rolling 24-hour opening price.
	Open NullableFloat64 `json:"open,omitempty"`
}

type _ParsedTickersGet200ResponseResultInner ParsedTickersGet200ResponseResultInner

// NewParsedTickersGet200ResponseResultInner instantiates a new ParsedTickersGet200ResponseResultInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParsedTickersGet200ResponseResultInner(tickerId string, baseCurrency string, quoteCurrency string, timestamp int32, baseVolume float64, quoteVolume float64) *ParsedTickersGet200ResponseResultInner {
	this := ParsedTickersGet200ResponseResultInner{}
	this.TickerId = tickerId
	this.BaseCurrency = baseCurrency
	this.QuoteCurrency = quoteCurrency
	this.Timestamp = timestamp
	this.BaseVolume = baseVolume
	this.QuoteVolume = quoteVolume
	return &this
}

// NewParsedTickersGet200ResponseResultInnerWithDefaults instantiates a new ParsedTickersGet200ResponseResultInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParsedTickersGet200ResponseResultInnerWithDefaults() *ParsedTickersGet200ResponseResultInner {
	this := ParsedTickersGet200ResponseResultInner{}
	return &this
}

// GetTickerId returns the TickerId field value
func (o *ParsedTickersGet200ResponseResultInner) GetTickerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TickerId
}

// GetTickerIdOk returns a tuple with the TickerId field value
// and a boolean to check if the value has been set.
func (o *ParsedTickersGet200ResponseResultInner) GetTickerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TickerId, true
}

// SetTickerId sets field value
func (o *ParsedTickersGet200ResponseResultInner) SetTickerId(v string) {
	o.TickerId = v
}

// GetBaseCurrency returns the BaseCurrency field value
func (o *ParsedTickersGet200ResponseResultInner) GetBaseCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BaseCurrency
}

// GetBaseCurrencyOk returns a tuple with the BaseCurrency field value
// and a boolean to check if the value has been set.
func (o *ParsedTickersGet200ResponseResultInner) GetBaseCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseCurrency, true
}

// SetBaseCurrency sets field value
func (o *ParsedTickersGet200ResponseResultInner) SetBaseCurrency(v string) {
	o.BaseCurrency = v
}

// GetQuoteCurrency returns the QuoteCurrency field value
func (o *ParsedTickersGet200ResponseResultInner) GetQuoteCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QuoteCurrency
}

// GetQuoteCurrencyOk returns a tuple with the QuoteCurrency field value
// and a boolean to check if the value has been set.
func (o *ParsedTickersGet200ResponseResultInner) GetQuoteCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuoteCurrency, true
}

// SetQuoteCurrency sets field value
func (o *ParsedTickersGet200ResponseResultInner) SetQuoteCurrency(v string) {
	o.QuoteCurrency = v
}

// GetTimestamp returns the Timestamp field value
func (o *ParsedTickersGet200ResponseResultInner) GetTimestamp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *ParsedTickersGet200ResponseResultInner) GetTimestampOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *ParsedTickersGet200ResponseResultInner) SetTimestamp(v int32) {
	o.Timestamp = v
}

// GetLastPrice returns the LastPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParsedTickersGet200ResponseResultInner) GetLastPrice() float64 {
	if o == nil || IsNil(o.LastPrice.Get()) {
		var ret float64
		return ret
	}
	return *o.LastPrice.Get()
}

// GetLastPriceOk returns a tuple with the LastPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParsedTickersGet200ResponseResultInner) GetLastPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastPrice.Get(), o.LastPrice.IsSet()
}

// HasLastPrice returns a boolean if a field has been set.
func (o *ParsedTickersGet200ResponseResultInner) HasLastPrice() bool {
	if o != nil && o.LastPrice.IsSet() {
		return true
	}

	return false
}

// SetLastPrice gets a reference to the given NullableFloat64 and assigns it to the LastPrice field.
func (o *ParsedTickersGet200ResponseResultInner) SetLastPrice(v float64) {
	o.LastPrice.Set(&v)
}
// SetLastPriceNil sets the value for LastPrice to be an explicit nil
func (o *ParsedTickersGet200ResponseResultInner) SetLastPriceNil() {
	o.LastPrice.Set(nil)
}

// UnsetLastPrice ensures that no value is present for LastPrice, not even an explicit nil
func (o *ParsedTickersGet200ResponseResultInner) UnsetLastPrice() {
	o.LastPrice.Unset()
}

// GetBaseVolume returns the BaseVolume field value
func (o *ParsedTickersGet200ResponseResultInner) GetBaseVolume() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.BaseVolume
}

// GetBaseVolumeOk returns a tuple with the BaseVolume field value
// and a boolean to check if the value has been set.
func (o *ParsedTickersGet200ResponseResultInner) GetBaseVolumeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseVolume, true
}

// SetBaseVolume sets field value
func (o *ParsedTickersGet200ResponseResultInner) SetBaseVolume(v float64) {
	o.BaseVolume = v
}

// GetQuoteVolume returns the QuoteVolume field value
func (o *ParsedTickersGet200ResponseResultInner) GetQuoteVolume() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.QuoteVolume
}

// GetQuoteVolumeOk returns a tuple with the QuoteVolume field value
// and a boolean to check if the value has been set.
func (o *ParsedTickersGet200ResponseResultInner) GetQuoteVolumeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuoteVolume, true
}

// SetQuoteVolume sets field value
func (o *ParsedTickersGet200ResponseResultInner) SetQuoteVolume(v float64) {
	o.QuoteVolume = v
}

// GetBid returns the Bid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParsedTickersGet200ResponseResultInner) GetBid() float64 {
	if o == nil || IsNil(o.Bid.Get()) {
		var ret float64
		return ret
	}
	return *o.Bid.Get()
}

// GetBidOk returns a tuple with the Bid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParsedTickersGet200ResponseResultInner) GetBidOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bid.Get(), o.Bid.IsSet()
}

// HasBid returns a boolean if a field has been set.
func (o *ParsedTickersGet200ResponseResultInner) HasBid() bool {
	if o != nil && o.Bid.IsSet() {
		return true
	}

	return false
}

// SetBid gets a reference to the given NullableFloat64 and assigns it to the Bid field.
func (o *ParsedTickersGet200ResponseResultInner) SetBid(v float64) {
	o.Bid.Set(&v)
}
// SetBidNil sets the value for Bid to be an explicit nil
func (o *ParsedTickersGet200ResponseResultInner) SetBidNil() {
	o.Bid.Set(nil)
}

// UnsetBid ensures that no value is present for Bid, not even an explicit nil
func (o *ParsedTickersGet200ResponseResultInner) UnsetBid() {
	o.Bid.Unset()
}

// GetAsk returns the Ask field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParsedTickersGet200ResponseResultInner) GetAsk() float64 {
	if o == nil || IsNil(o.Ask.Get()) {
		var ret float64
		return ret
	}
	return *o.Ask.Get()
}

// GetAskOk returns a tuple with the Ask field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParsedTickersGet200ResponseResultInner) GetAskOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ask.Get(), o.Ask.IsSet()
}

// HasAsk returns a boolean if a field has been set.
func (o *ParsedTickersGet200ResponseResultInner) HasAsk() bool {
	if o != nil && o.Ask.IsSet() {
		return true
	}

	return false
}

// SetAsk gets a reference to the given NullableFloat64 and assigns it to the Ask field.
func (o *ParsedTickersGet200ResponseResultInner) SetAsk(v float64) {
	o.Ask.Set(&v)
}
// SetAskNil sets the value for Ask to be an explicit nil
func (o *ParsedTickersGet200ResponseResultInner) SetAskNil() {
	o.Ask.Set(nil)
}

// UnsetAsk ensures that no value is present for Ask, not even an explicit nil
func (o *ParsedTickersGet200ResponseResultInner) UnsetAsk() {
	o.Ask.Unset()
}

// GetHigh returns the High field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParsedTickersGet200ResponseResultInner) GetHigh() float64 {
	if o == nil || IsNil(o.High.Get()) {
		var ret float64
		return ret
	}
	return *o.High.Get()
}

// GetHighOk returns a tuple with the High field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParsedTickersGet200ResponseResultInner) GetHighOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.High.Get(), o.High.IsSet()
}

// HasHigh returns a boolean if a field has been set.
func (o *ParsedTickersGet200ResponseResultInner) HasHigh() bool {
	if o != nil && o.High.IsSet() {
		return true
	}

	return false
}

// SetHigh gets a reference to the given NullableFloat64 and assigns it to the High field.
func (o *ParsedTickersGet200ResponseResultInner) SetHigh(v float64) {
	o.High.Set(&v)
}
// SetHighNil sets the value for High to be an explicit nil
func (o *ParsedTickersGet200ResponseResultInner) SetHighNil() {
	o.High.Set(nil)
}

// UnsetHigh ensures that no value is present for High, not even an explicit nil
func (o *ParsedTickersGet200ResponseResultInner) UnsetHigh() {
	o.High.Unset()
}

// GetLow returns the Low field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParsedTickersGet200ResponseResultInner) GetLow() float64 {
	if o == nil || IsNil(o.Low.Get()) {
		var ret float64
		return ret
	}
	return *o.Low.Get()
}

// GetLowOk returns a tuple with the Low field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParsedTickersGet200ResponseResultInner) GetLowOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Low.Get(), o.Low.IsSet()
}

// HasLow returns a boolean if a field has been set.
func (o *ParsedTickersGet200ResponseResultInner) HasLow() bool {
	if o != nil && o.Low.IsSet() {
		return true
	}

	return false
}

// SetLow gets a reference to the given NullableFloat64 and assigns it to the Low field.
func (o *ParsedTickersGet200ResponseResultInner) SetLow(v float64) {
	o.Low.Set(&v)
}
// SetLowNil sets the value for Low to be an explicit nil
func (o *ParsedTickersGet200ResponseResultInner) SetLowNil() {
	o.Low.Set(nil)
}

// UnsetLow ensures that no value is present for Low, not even an explicit nil
func (o *ParsedTickersGet200ResponseResultInner) UnsetLow() {
	o.Low.Unset()
}

// GetOpen returns the Open field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParsedTickersGet200ResponseResultInner) GetOpen() float64 {
	if o == nil || IsNil(o.Open.Get()) {
		var ret float64
		return ret
	}
	return *o.Open.Get()
}

// GetOpenOk returns a tuple with the Open field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParsedTickersGet200ResponseResultInner) GetOpenOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Open.Get(), o.Open.IsSet()
}

// HasOpen returns a boolean if a field has been set.
func (o *ParsedTickersGet200ResponseResultInner) HasOpen() bool {
	if o != nil && o.Open.IsSet() {
		return true
	}

	return false
}

// SetOpen gets a reference to the given NullableFloat64 and assigns it to the Open field.
func (o *ParsedTickersGet200ResponseResultInner) SetOpen(v float64) {
	o.Open.Set(&v)
}
// SetOpenNil sets the value for Open to be an explicit nil
func (o *ParsedTickersGet200ResponseResultInner) SetOpenNil() {
	o.Open.Set(nil)
}

// UnsetOpen ensures that no value is present for Open, not even an explicit nil
func (o *ParsedTickersGet200ResponseResultInner) UnsetOpen() {
	o.Open.Unset()
}

func (o ParsedTickersGet200ResponseResultInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParsedTickersGet200ResponseResultInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ticker_id"] = o.TickerId
	toSerialize["base_currency"] = o.BaseCurrency
	toSerialize["quote_currency"] = o.QuoteCurrency
	toSerialize["timestamp"] = o.Timestamp
	if o.LastPrice.IsSet() {
		toSerialize["last_price"] = o.LastPrice.Get()
	}
	toSerialize["base_volume"] = o.BaseVolume
	toSerialize["quote_volume"] = o.QuoteVolume
	if o.Bid.IsSet() {
		toSerialize["bid"] = o.Bid.Get()
	}
	if o.Ask.IsSet() {
		toSerialize["ask"] = o.Ask.Get()
	}
	if o.High.IsSet() {
		toSerialize["high"] = o.High.Get()
	}
	if o.Low.IsSet() {
		toSerialize["low"] = o.Low.Get()
	}
	if o.Open.IsSet() {
		toSerialize["open"] = o.Open.Get()
	}
	return toSerialize, nil
}

func (o *ParsedTickersGet200ResponseResultInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ticker_id",
		"base_currency",
		"quote_currency",
		"timestamp",
		"base_volume",
		"quote_volume",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParsedTickersGet200ResponseResultInner := _ParsedTickersGet200ResponseResultInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varParsedTickersGet200ResponseResultInner)

	if err != nil {
		return err
	}

	*o = ParsedTickersGet200ResponseResultInner(varParsedTickersGet200ResponseResultInner)

	return err
}

type NullableParsedTickersGet200ResponseResultInner struct {
	value *ParsedTickersGet200ResponseResultInner
	isSet bool
}

func (v NullableParsedTickersGet200ResponseResultInner) Get() *ParsedTickersGet200ResponseResultInner {
	return v.value
}

func (v *NullableParsedTickersGet200ResponseResultInner) Set(val *ParsedTickersGet200ResponseResultInner) {
	v.value = val
	v.isSet = true
}

func (v NullableParsedTickersGet200ResponseResultInner) IsSet() bool {
	return v.isSet
}

func (v *NullableParsedTickersGet200ResponseResultInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParsedTickersGet200ResponseResultInner(val *ParsedTickersGet200ResponseResultInner) *NullableParsedTickersGet200ResponseResultInner {
	return &NullableParsedTickersGet200ResponseResultInner{value: val, isSet: true}
}

func (v NullableParsedTickersGet200ResponseResultInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParsedTickersGet200ResponseResultInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


