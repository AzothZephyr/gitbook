/*
Cube Osmium HTTP API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
Contact: support@cube.exchange
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrderDelete200ResponseResult - struct for OrderDelete200ResponseResult
type OrderDelete200ResponseResult struct {
	OrderDelete200ResponseResultOneOf *OrderDelete200ResponseResultOneOf
	OrderDelete200ResponseResultOneOf1 *OrderDelete200ResponseResultOneOf1
}

// OrderDelete200ResponseResultOneOfAsOrderDelete200ResponseResult is a convenience function that returns OrderDelete200ResponseResultOneOf wrapped in OrderDelete200ResponseResult
func OrderDelete200ResponseResultOneOfAsOrderDelete200ResponseResult(v *OrderDelete200ResponseResultOneOf) OrderDelete200ResponseResult {
	return OrderDelete200ResponseResult{
		OrderDelete200ResponseResultOneOf: v,
	}
}

// OrderDelete200ResponseResultOneOf1AsOrderDelete200ResponseResult is a convenience function that returns OrderDelete200ResponseResultOneOf1 wrapped in OrderDelete200ResponseResult
func OrderDelete200ResponseResultOneOf1AsOrderDelete200ResponseResult(v *OrderDelete200ResponseResultOneOf1) OrderDelete200ResponseResult {
	return OrderDelete200ResponseResult{
		OrderDelete200ResponseResultOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *OrderDelete200ResponseResult) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into OrderDelete200ResponseResultOneOf
	err = newStrictDecoder(data).Decode(&dst.OrderDelete200ResponseResultOneOf)
	if err == nil {
		jsonOrderDelete200ResponseResultOneOf, _ := json.Marshal(dst.OrderDelete200ResponseResultOneOf)
		if string(jsonOrderDelete200ResponseResultOneOf) == "{}" { // empty struct
			dst.OrderDelete200ResponseResultOneOf = nil
		} else {
			match++
		}
	} else {
		dst.OrderDelete200ResponseResultOneOf = nil
	}

	// try to unmarshal data into OrderDelete200ResponseResultOneOf1
	err = newStrictDecoder(data).Decode(&dst.OrderDelete200ResponseResultOneOf1)
	if err == nil {
		jsonOrderDelete200ResponseResultOneOf1, _ := json.Marshal(dst.OrderDelete200ResponseResultOneOf1)
		if string(jsonOrderDelete200ResponseResultOneOf1) == "{}" { // empty struct
			dst.OrderDelete200ResponseResultOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.OrderDelete200ResponseResultOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.OrderDelete200ResponseResultOneOf = nil
		dst.OrderDelete200ResponseResultOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(OrderDelete200ResponseResult)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(OrderDelete200ResponseResult)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src OrderDelete200ResponseResult) MarshalJSON() ([]byte, error) {
	if src.OrderDelete200ResponseResultOneOf != nil {
		return json.Marshal(&src.OrderDelete200ResponseResultOneOf)
	}

	if src.OrderDelete200ResponseResultOneOf1 != nil {
		return json.Marshal(&src.OrderDelete200ResponseResultOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *OrderDelete200ResponseResult) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.OrderDelete200ResponseResultOneOf != nil {
		return obj.OrderDelete200ResponseResultOneOf
	}

	if obj.OrderDelete200ResponseResultOneOf1 != nil {
		return obj.OrderDelete200ResponseResultOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableOrderDelete200ResponseResult struct {
	value *OrderDelete200ResponseResult
	isSet bool
}

func (v NullableOrderDelete200ResponseResult) Get() *OrderDelete200ResponseResult {
	return v.value
}

func (v *NullableOrderDelete200ResponseResult) Set(val *OrderDelete200ResponseResult) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderDelete200ResponseResult) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderDelete200ResponseResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderDelete200ResponseResult(val *OrderDelete200ResponseResult) *NullableOrderDelete200ResponseResult {
	return &NullableOrderDelete200ResponseResult{value: val, isSet: true}
}

func (v NullableOrderDelete200ResponseResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderDelete200ResponseResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


