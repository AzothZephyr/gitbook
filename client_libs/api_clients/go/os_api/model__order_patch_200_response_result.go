/*
Cube Osmium HTTP API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
Contact: support@cube.exchange
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrderPatch200ResponseResult - struct for OrderPatch200ResponseResult
type OrderPatch200ResponseResult struct {
	OrderPatch200ResponseResultOneOf *OrderPatch200ResponseResultOneOf
	OrderPatch200ResponseResultOneOf1 *OrderPatch200ResponseResultOneOf1
}

// OrderPatch200ResponseResultOneOfAsOrderPatch200ResponseResult is a convenience function that returns OrderPatch200ResponseResultOneOf wrapped in OrderPatch200ResponseResult
func OrderPatch200ResponseResultOneOfAsOrderPatch200ResponseResult(v *OrderPatch200ResponseResultOneOf) OrderPatch200ResponseResult {
	return OrderPatch200ResponseResult{
		OrderPatch200ResponseResultOneOf: v,
	}
}

// OrderPatch200ResponseResultOneOf1AsOrderPatch200ResponseResult is a convenience function that returns OrderPatch200ResponseResultOneOf1 wrapped in OrderPatch200ResponseResult
func OrderPatch200ResponseResultOneOf1AsOrderPatch200ResponseResult(v *OrderPatch200ResponseResultOneOf1) OrderPatch200ResponseResult {
	return OrderPatch200ResponseResult{
		OrderPatch200ResponseResultOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *OrderPatch200ResponseResult) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into OrderPatch200ResponseResultOneOf
	err = newStrictDecoder(data).Decode(&dst.OrderPatch200ResponseResultOneOf)
	if err == nil {
		jsonOrderPatch200ResponseResultOneOf, _ := json.Marshal(dst.OrderPatch200ResponseResultOneOf)
		if string(jsonOrderPatch200ResponseResultOneOf) == "{}" { // empty struct
			dst.OrderPatch200ResponseResultOneOf = nil
		} else {
			match++
		}
	} else {
		dst.OrderPatch200ResponseResultOneOf = nil
	}

	// try to unmarshal data into OrderPatch200ResponseResultOneOf1
	err = newStrictDecoder(data).Decode(&dst.OrderPatch200ResponseResultOneOf1)
	if err == nil {
		jsonOrderPatch200ResponseResultOneOf1, _ := json.Marshal(dst.OrderPatch200ResponseResultOneOf1)
		if string(jsonOrderPatch200ResponseResultOneOf1) == "{}" { // empty struct
			dst.OrderPatch200ResponseResultOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.OrderPatch200ResponseResultOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.OrderPatch200ResponseResultOneOf = nil
		dst.OrderPatch200ResponseResultOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(OrderPatch200ResponseResult)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(OrderPatch200ResponseResult)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src OrderPatch200ResponseResult) MarshalJSON() ([]byte, error) {
	if src.OrderPatch200ResponseResultOneOf != nil {
		return json.Marshal(&src.OrderPatch200ResponseResultOneOf)
	}

	if src.OrderPatch200ResponseResultOneOf1 != nil {
		return json.Marshal(&src.OrderPatch200ResponseResultOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *OrderPatch200ResponseResult) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.OrderPatch200ResponseResultOneOf != nil {
		return obj.OrderPatch200ResponseResultOneOf
	}

	if obj.OrderPatch200ResponseResultOneOf1 != nil {
		return obj.OrderPatch200ResponseResultOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableOrderPatch200ResponseResult struct {
	value *OrderPatch200ResponseResult
	isSet bool
}

func (v NullableOrderPatch200ResponseResult) Get() *OrderPatch200ResponseResult {
	return v.value
}

func (v *NullableOrderPatch200ResponseResult) Set(val *OrderPatch200ResponseResult) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderPatch200ResponseResult) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderPatch200ResponseResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderPatch200ResponseResult(val *OrderPatch200ResponseResult) *NullableOrderPatch200ResponseResult {
	return &NullableOrderPatch200ResponseResult{value: val, isSet: true}
}

func (v NullableOrderPatch200ResponseResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderPatch200ResponseResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


