/*
Cube Osmium HTTP API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
Contact: support@cube.exchange
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OrderPatchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderPatchRequest{}

// OrderPatchRequest Modify a resting order. - If the `newPrice` and the current resting order's price is the same, and `newQuantity` is not greater, then the modify is considered a modify down, and the FIFO queue priority is maintained. Otherwise, the modify-order request is treated as an atomic cancel-replace and the replacement order is placed at the end of the FIFO queue for the new price level. - If post-only is specified and the replacement order would trade, then the request is rejected and the current resting order remains resting.  Currently, in-flight-mitigation (IFM) is always enabled. That is, the cumulative fill qty is subtracted from `newQuantity` to calculate the new resting quantity. For example:  ```text | Resting | Filled ---------+---------+-------- New 5    | 5       | 0 Fill 2   | 3       | 2 Modify 4 | 2       | 2 ```  The post-modify quantity will be `newQuantity - filled = 4 - 2 = 2`.  Regardless of IFM, the invariant for order quantity is that `quantity = remaining_quantity + cumulative_quantity`.
type OrderPatchRequest struct {
	MarketId int32 `json:"marketId"`
	// The order ID specified by the client on the NewOrder request.
	ClientOrderId int32 `json:"clientOrderId"`
	// A request ID that is echoed back on the ModifyOrderAck or ModifyOrderReject
	RequestId int32 `json:"requestId"`
	NewPrice int32 `json:"newPrice"`
	NewQuantity int32 `json:"newQuantity"`
	// The subaccount that the NewOrder was placed on.
	SubaccountId int32 `json:"subaccountId"`
	SelfTradePrevention NullableInt32 `json:"selfTradePrevention,omitempty"`
	PostOnly int32 `json:"postOnly"`
}

type _OrderPatchRequest OrderPatchRequest

// NewOrderPatchRequest instantiates a new OrderPatchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderPatchRequest(marketId int32, clientOrderId int32, requestId int32, newPrice int32, newQuantity int32, subaccountId int32, postOnly int32) *OrderPatchRequest {
	this := OrderPatchRequest{}
	this.MarketId = marketId
	this.ClientOrderId = clientOrderId
	this.RequestId = requestId
	this.NewPrice = newPrice
	this.NewQuantity = newQuantity
	this.SubaccountId = subaccountId
	this.PostOnly = postOnly
	return &this
}

// NewOrderPatchRequestWithDefaults instantiates a new OrderPatchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderPatchRequestWithDefaults() *OrderPatchRequest {
	this := OrderPatchRequest{}
	return &this
}

// GetMarketId returns the MarketId field value
func (o *OrderPatchRequest) GetMarketId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MarketId
}

// GetMarketIdOk returns a tuple with the MarketId field value
// and a boolean to check if the value has been set.
func (o *OrderPatchRequest) GetMarketIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MarketId, true
}

// SetMarketId sets field value
func (o *OrderPatchRequest) SetMarketId(v int32) {
	o.MarketId = v
}

// GetClientOrderId returns the ClientOrderId field value
func (o *OrderPatchRequest) GetClientOrderId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ClientOrderId
}

// GetClientOrderIdOk returns a tuple with the ClientOrderId field value
// and a boolean to check if the value has been set.
func (o *OrderPatchRequest) GetClientOrderIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientOrderId, true
}

// SetClientOrderId sets field value
func (o *OrderPatchRequest) SetClientOrderId(v int32) {
	o.ClientOrderId = v
}

// GetRequestId returns the RequestId field value
func (o *OrderPatchRequest) GetRequestId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *OrderPatchRequest) GetRequestIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *OrderPatchRequest) SetRequestId(v int32) {
	o.RequestId = v
}

// GetNewPrice returns the NewPrice field value
func (o *OrderPatchRequest) GetNewPrice() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NewPrice
}

// GetNewPriceOk returns a tuple with the NewPrice field value
// and a boolean to check if the value has been set.
func (o *OrderPatchRequest) GetNewPriceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewPrice, true
}

// SetNewPrice sets field value
func (o *OrderPatchRequest) SetNewPrice(v int32) {
	o.NewPrice = v
}

// GetNewQuantity returns the NewQuantity field value
func (o *OrderPatchRequest) GetNewQuantity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NewQuantity
}

// GetNewQuantityOk returns a tuple with the NewQuantity field value
// and a boolean to check if the value has been set.
func (o *OrderPatchRequest) GetNewQuantityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewQuantity, true
}

// SetNewQuantity sets field value
func (o *OrderPatchRequest) SetNewQuantity(v int32) {
	o.NewQuantity = v
}

// GetSubaccountId returns the SubaccountId field value
func (o *OrderPatchRequest) GetSubaccountId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SubaccountId
}

// GetSubaccountIdOk returns a tuple with the SubaccountId field value
// and a boolean to check if the value has been set.
func (o *OrderPatchRequest) GetSubaccountIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubaccountId, true
}

// SetSubaccountId sets field value
func (o *OrderPatchRequest) SetSubaccountId(v int32) {
	o.SubaccountId = v
}

// GetSelfTradePrevention returns the SelfTradePrevention field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderPatchRequest) GetSelfTradePrevention() int32 {
	if o == nil || IsNil(o.SelfTradePrevention.Get()) {
		var ret int32
		return ret
	}
	return *o.SelfTradePrevention.Get()
}

// GetSelfTradePreventionOk returns a tuple with the SelfTradePrevention field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderPatchRequest) GetSelfTradePreventionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SelfTradePrevention.Get(), o.SelfTradePrevention.IsSet()
}

// HasSelfTradePrevention returns a boolean if a field has been set.
func (o *OrderPatchRequest) HasSelfTradePrevention() bool {
	if o != nil && o.SelfTradePrevention.IsSet() {
		return true
	}

	return false
}

// SetSelfTradePrevention gets a reference to the given NullableInt32 and assigns it to the SelfTradePrevention field.
func (o *OrderPatchRequest) SetSelfTradePrevention(v int32) {
	o.SelfTradePrevention.Set(&v)
}
// SetSelfTradePreventionNil sets the value for SelfTradePrevention to be an explicit nil
func (o *OrderPatchRequest) SetSelfTradePreventionNil() {
	o.SelfTradePrevention.Set(nil)
}

// UnsetSelfTradePrevention ensures that no value is present for SelfTradePrevention, not even an explicit nil
func (o *OrderPatchRequest) UnsetSelfTradePrevention() {
	o.SelfTradePrevention.Unset()
}

// GetPostOnly returns the PostOnly field value
func (o *OrderPatchRequest) GetPostOnly() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PostOnly
}

// GetPostOnlyOk returns a tuple with the PostOnly field value
// and a boolean to check if the value has been set.
func (o *OrderPatchRequest) GetPostOnlyOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PostOnly, true
}

// SetPostOnly sets field value
func (o *OrderPatchRequest) SetPostOnly(v int32) {
	o.PostOnly = v
}

func (o OrderPatchRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderPatchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["marketId"] = o.MarketId
	toSerialize["clientOrderId"] = o.ClientOrderId
	toSerialize["requestId"] = o.RequestId
	toSerialize["newPrice"] = o.NewPrice
	toSerialize["newQuantity"] = o.NewQuantity
	toSerialize["subaccountId"] = o.SubaccountId
	if o.SelfTradePrevention.IsSet() {
		toSerialize["selfTradePrevention"] = o.SelfTradePrevention.Get()
	}
	toSerialize["postOnly"] = o.PostOnly
	return toSerialize, nil
}

func (o *OrderPatchRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"marketId",
		"clientOrderId",
		"requestId",
		"newPrice",
		"newQuantity",
		"subaccountId",
		"postOnly",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrderPatchRequest := _OrderPatchRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOrderPatchRequest)

	if err != nil {
		return err
	}

	*o = OrderPatchRequest(varOrderPatchRequest)

	return err
}

type NullableOrderPatchRequest struct {
	value *OrderPatchRequest
	isSet bool
}

func (v NullableOrderPatchRequest) Get() *OrderPatchRequest {
	return v.value
}

func (v *NullableOrderPatchRequest) Set(val *OrderPatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderPatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderPatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderPatchRequest(val *OrderPatchRequest) *NullableOrderPatchRequest {
	return &NullableOrderPatchRequest{value: val, isSet: true}
}

func (v NullableOrderPatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderPatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


