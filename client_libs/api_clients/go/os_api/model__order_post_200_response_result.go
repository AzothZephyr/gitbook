/*
Cube Osmium HTTP API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
Contact: support@cube.exchange
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrderPost200ResponseResult - struct for OrderPost200ResponseResult
type OrderPost200ResponseResult struct {
	OrderPost200ResponseResultOneOf *OrderPost200ResponseResultOneOf
	OrderPost200ResponseResultOneOf1 *OrderPost200ResponseResultOneOf1
}

// OrderPost200ResponseResultOneOfAsOrderPost200ResponseResult is a convenience function that returns OrderPost200ResponseResultOneOf wrapped in OrderPost200ResponseResult
func OrderPost200ResponseResultOneOfAsOrderPost200ResponseResult(v *OrderPost200ResponseResultOneOf) OrderPost200ResponseResult {
	return OrderPost200ResponseResult{
		OrderPost200ResponseResultOneOf: v,
	}
}

// OrderPost200ResponseResultOneOf1AsOrderPost200ResponseResult is a convenience function that returns OrderPost200ResponseResultOneOf1 wrapped in OrderPost200ResponseResult
func OrderPost200ResponseResultOneOf1AsOrderPost200ResponseResult(v *OrderPost200ResponseResultOneOf1) OrderPost200ResponseResult {
	return OrderPost200ResponseResult{
		OrderPost200ResponseResultOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *OrderPost200ResponseResult) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into OrderPost200ResponseResultOneOf
	err = newStrictDecoder(data).Decode(&dst.OrderPost200ResponseResultOneOf)
	if err == nil {
		jsonOrderPost200ResponseResultOneOf, _ := json.Marshal(dst.OrderPost200ResponseResultOneOf)
		if string(jsonOrderPost200ResponseResultOneOf) == "{}" { // empty struct
			dst.OrderPost200ResponseResultOneOf = nil
		} else {
			match++
		}
	} else {
		dst.OrderPost200ResponseResultOneOf = nil
	}

	// try to unmarshal data into OrderPost200ResponseResultOneOf1
	err = newStrictDecoder(data).Decode(&dst.OrderPost200ResponseResultOneOf1)
	if err == nil {
		jsonOrderPost200ResponseResultOneOf1, _ := json.Marshal(dst.OrderPost200ResponseResultOneOf1)
		if string(jsonOrderPost200ResponseResultOneOf1) == "{}" { // empty struct
			dst.OrderPost200ResponseResultOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.OrderPost200ResponseResultOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.OrderPost200ResponseResultOneOf = nil
		dst.OrderPost200ResponseResultOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(OrderPost200ResponseResult)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(OrderPost200ResponseResult)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src OrderPost200ResponseResult) MarshalJSON() ([]byte, error) {
	if src.OrderPost200ResponseResultOneOf != nil {
		return json.Marshal(&src.OrderPost200ResponseResultOneOf)
	}

	if src.OrderPost200ResponseResultOneOf1 != nil {
		return json.Marshal(&src.OrderPost200ResponseResultOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *OrderPost200ResponseResult) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.OrderPost200ResponseResultOneOf != nil {
		return obj.OrderPost200ResponseResultOneOf
	}

	if obj.OrderPost200ResponseResultOneOf1 != nil {
		return obj.OrderPost200ResponseResultOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableOrderPost200ResponseResult struct {
	value *OrderPost200ResponseResult
	isSet bool
}

func (v NullableOrderPost200ResponseResult) Get() *OrderPost200ResponseResult {
	return v.value
}

func (v *NullableOrderPost200ResponseResult) Set(val *OrderPost200ResponseResult) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderPost200ResponseResult) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderPost200ResponseResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderPost200ResponseResult(val *OrderPost200ResponseResult) *NullableOrderPost200ResponseResult {
	return &NullableOrderPost200ResponseResult{value: val, isSet: true}
}

func (v NullableOrderPost200ResponseResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderPost200ResponseResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


