/*
 * Cube Iridium HTTP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@cube.exchange
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MarketsGet200ResponseResultAssetsInner {
    /// The Cube-assigned asset ID.
    #[serde(rename = "assetId")]
    pub asset_id: i32,
    /// The canonical symbol for this asset.
    #[serde(rename = "symbol")]
    pub symbol: String,
    /// The maximum precision of this asset.  e.g `18` for ETH (`10^18` WEI per ETH), `8` for BTC (`10^8` SAT per BTC)
    #[serde(rename = "decimals")]
    pub decimals: i32,
    /// The default number of decimal places to display for human-readable quantities for this asset.
    #[serde(rename = "displayDecimals")]
    pub display_decimals: i32,
    /// Whether this asset settles to the blockchain.
    #[serde(rename = "settles")]
    pub settles: bool,
    /// The type of this asset.
    #[serde(rename = "assetType")]
    pub asset_type: AssetType,
    /// The source ID of this asset.
    #[serde(rename = "sourceId")]
    pub source_id: i32,
    /// Additional metadata about this asset.
    #[serde(rename = "metadata", deserialize_with = "Option::deserialize")]
    pub metadata: Option<serde_json::Value>,
}

impl MarketsGet200ResponseResultAssetsInner {
    pub fn new(asset_id: i32, symbol: String, decimals: i32, display_decimals: i32, settles: bool, asset_type: AssetType, source_id: i32, metadata: Option<serde_json::Value>) -> MarketsGet200ResponseResultAssetsInner {
        MarketsGet200ResponseResultAssetsInner {
            asset_id,
            symbol,
            decimals,
            display_decimals,
            settles,
            asset_type,
            source_id,
            metadata,
        }
    }
}
/// The type of this asset.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AssetType {
    #[serde(rename = "Fiat")]
    Fiat,
    #[serde(rename = "Crypto")]
    Crypto,
}

impl Default for AssetType {
    fn default() -> AssetType {
        Self::Fiat
    }
}

