/*
 * Cube Iridium HTTP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@cube.exchange
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// MarketsGet200ResponseResultMarketsInner : A market is identified by its unique `marketId`. The market definition specifies specifies the base and quote assets and their respective lot sizes for the particular market.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MarketsGet200ResponseResultMarketsInner {
    /// The Cube-assigned market ID.
    #[serde(rename = "marketId")]
    pub market_id: i32,
    /// The market's symbol. Normally this is base symbol concatenated with the quote symbol.  e.g `BTCUSDC`
    #[serde(rename = "symbol")]
    pub symbol: String,
    /// The asset ID of the base asset.
    #[serde(rename = "baseAssetId")]
    pub base_asset_id: i32,
    /// The number of units of the base asset that are represented by one base lot.
    #[serde(rename = "baseLotSize")]
    pub base_lot_size: String,
    /// The asset ID of the quote asset.
    #[serde(rename = "quoteAssetId")]
    pub quote_asset_id: i32,
    /// The number of units of the quote asset that are represented by one quote lot.
    #[serde(rename = "quoteLotSize")]
    pub quote_lot_size: String,
    /// The default number of decimal places to display for human-readable prices for this market.
    #[serde(rename = "priceDisplayDecimals")]
    pub price_display_decimals: i32,
    #[serde(rename = "protectionPriceLevels")]
    pub protection_price_levels: i32,
    /// The percentage that a new bid can be placed below the current reference price.
    #[serde(rename = "priceBandBidPct", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub price_band_bid_pct: Option<Option<i32>>,
    /// The percentage that a new ask can be placed above the current reference price.
    #[serde(rename = "priceBandAskPct", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub price_band_ask_pct: Option<Option<i32>>,
    /// The minimum order quantity lots for this market. Inclusive.
    #[serde(rename = "minOrderQty", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub min_order_qty: Option<Option<i64>>,
    /// The maximum order quantity lots for this market. Inclusive.
    #[serde(rename = "maxOrderQty", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub max_order_qty: Option<Option<i64>>,
    /// The human-readable minimum price increment.
    #[serde(rename = "priceTickSize")]
    pub price_tick_size: String,
    /// The human-readable minimum quantity increment.
    #[serde(rename = "quantityTickSize")]
    pub quantity_tick_size: String,
    /// ID of the fee table that will be used for lookups on this market.
    #[serde(rename = "feeTableId")]
    pub fee_table_id: i32,
    /// If this is an implied market, this is the list of implied-through base markets. Otherwise, this is `None`.
    #[serde(rename = "baseMarketIds", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub base_market_ids: Option<Option<Vec<i32>>>,
    /// If this market is currently enabled for implied matching, this will be `true`. Otherwise, this will be `false` or missing.
    #[serde(rename = "isImplied")]
    pub is_implied: bool,
}

impl MarketsGet200ResponseResultMarketsInner {
    /// A market is identified by its unique `marketId`. The market definition specifies specifies the base and quote assets and their respective lot sizes for the particular market.
    pub fn new(market_id: i32, symbol: String, base_asset_id: i32, base_lot_size: String, quote_asset_id: i32, quote_lot_size: String, price_display_decimals: i32, protection_price_levels: i32, price_tick_size: String, quantity_tick_size: String, fee_table_id: i32, is_implied: bool) -> MarketsGet200ResponseResultMarketsInner {
        MarketsGet200ResponseResultMarketsInner {
            market_id,
            symbol,
            base_asset_id,
            base_lot_size,
            quote_asset_id,
            quote_lot_size,
            price_display_decimals,
            protection_price_levels,
            price_band_bid_pct: None,
            price_band_ask_pct: None,
            min_order_qty: None,
            max_order_qty: None,
            price_tick_size,
            quantity_tick_size,
            fee_table_id,
            base_market_ids: None,
            is_implied,
        }
    }
}

