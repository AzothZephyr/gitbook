/*
 * Cube Iridium HTTP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@cube.exchange
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UsersInfoGet200ResponseResult {
    #[serde(rename = "apiKeys")]
    pub api_keys: Vec<models::UsersInfoGet200ResponseResultApiKeysInner>,
    #[serde(rename = "subaccounts")]
    pub subaccounts: Vec<models::UsersInfoGet200ResponseResultSubaccountsInner>,
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "email")]
    pub email: String,
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "vipLevel")]
    pub vip_level: i32,
    #[serde(rename = "points")]
    pub points: i64,
    #[serde(rename = "mpcKeyId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub mpc_key_id: Option<Option<i64>>,
    #[serde(rename = "guardianHasKey", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub guardian_has_key: Option<Option<Vec<models::UsersInfoGet200ResponseResultGuardianHasKeyInner>>>,
    #[serde(rename = "hasGuardianQuorum")]
    pub has_guardian_quorum: bool,
    #[serde(rename = "phoneNumber", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub phone_number: Option<Option<String>>,
    #[serde(rename = "kycStatus")]
    pub kyc_status: std::collections::HashMap<String, models::UsersInfoGet200ResponseResultKycStatusValue>,
    #[serde(rename = "hasApprovedKyc")]
    pub has_approved_kyc: bool,
    #[serde(rename = "registration", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub registration: Option<Option<Box<models::UsersInfoGet200ResponseResultRegistration>>>,
    #[serde(rename = "firstName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<Option<String>>,
    #[serde(rename = "lastName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<Option<String>>,
    #[serde(rename = "country", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub country: Option<Option<String>>,
    #[serde(rename = "inviteId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub invite_id: Option<Option<uuid::Uuid>>,
    #[serde(rename = "referralCode", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub referral_code: Option<Option<String>>,
    #[serde(rename = "maxSubaccounts")]
    pub max_subaccounts: i32,
}

impl UsersInfoGet200ResponseResult {
    pub fn new(api_keys: Vec<models::UsersInfoGet200ResponseResultApiKeysInner>, subaccounts: Vec<models::UsersInfoGet200ResponseResultSubaccountsInner>, id: uuid::Uuid, email: String, status: Status, vip_level: i32, points: i64, has_guardian_quorum: bool, kyc_status: std::collections::HashMap<String, models::UsersInfoGet200ResponseResultKycStatusValue>, has_approved_kyc: bool, max_subaccounts: i32) -> UsersInfoGet200ResponseResult {
        UsersInfoGet200ResponseResult {
            api_keys,
            subaccounts,
            id,
            email,
            status,
            vip_level,
            points,
            mpc_key_id: None,
            guardian_has_key: None,
            has_guardian_quorum,
            phone_number: None,
            kyc_status,
            has_approved_kyc,
            registration: None,
            first_name: None,
            last_name: None,
            country: None,
            invite_id: None,
            referral_code: None,
            max_subaccounts,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "waitlist")]
    Waitlist,
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for Status {
    fn default() -> Status {
        Self::Waitlist
    }
}

