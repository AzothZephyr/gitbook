/*
 * Cube Iridium HTTP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@cube.exchange
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UsersSubaccountSubaccountIdOrdersGet200ResponseResultOrdersInner {
    /// The cube-assigned order ID, also known as `ExchangeOrderId`. Unique per order.
    #[serde(rename = "orderId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub order_id: Option<Option<i64>>,
    #[serde(rename = "marketId")]
    pub market_id: i32,
    #[serde(rename = "side")]
    pub side: Side,
    /// Most recent price, including modifies
    #[serde(rename = "price")]
    pub price: i32,
    /// Most recent quantity, including modifies
    #[serde(rename = "qty")]
    pub qty: i32,
    /// The matching-engine transact-time in nanoseconds that this order was created.
    #[serde(rename = "createdAt")]
    pub created_at: i64,
    /// The matching-engine transact-time in nanoseconds of the most recent modify event. Empty if the order was never modified.
    #[serde(rename = "modifiedAt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub modified_at: Option<Option<i64>>,
    /// The matching-engine transact-time in nanoseconds when this order was cancelled. Empty if the order was never cancelled, e.g. is open or filled.
    #[serde(rename = "canceledAt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub canceled_at: Option<Option<i64>>,
    #[serde(rename = "filledAt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub filled_at: Option<Option<i64>>,
    #[serde(rename = "filledTotal", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub filled_total: Option<Option<Box<models::UsersSubaccountSubaccountIdOrdersGet200ResponseResultOrdersInnerFilledTotal>>>,
    #[serde(rename = "fills")]
    pub fills: Vec<models::UsersSubaccountSubaccountIdOrdersGet200ResponseResultOrdersInnerFillsInner>,
    /// Any previous states of price/quantity associated with this order due to modifies. If the order has been modified, the original price/quantity will appear in this list.
    #[serde(rename = "modifies")]
    pub modifies: Vec<models::UsersSubaccountSubaccountIdOrdersGet200ResponseResultOrdersInnerModifiesInner>,
    /// Reject reason if rejected. Cancel reason if canceled.
    #[serde(rename = "reason", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub reason: Option<Option<String>>,
    /// The settlement status for this order's fills.  If the order has no fills, or none of the fills have been assigned to a settlement batch, then this will be `None`. This can be derived from `fills`.
    #[serde(rename = "settled", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub settled: Option<Option<bool>>,
    /// The current status of this order. Note that if the order is `Open`, this is a best-effort estimation, and the order service has the most correct status.
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "clientOrderId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub client_order_id: Option<Option<i32>>,
    #[serde(rename = "timeInForce", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub time_in_force: Option<Option<i32>>,
    #[serde(rename = "orderType", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub order_type: Option<Option<i32>>,
    #[serde(rename = "selfTradePrevention", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub self_trade_prevention: Option<Option<i32>>,
    #[serde(rename = "cancelOnDisconnect", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub cancel_on_disconnect: Option<Option<bool>>,
    #[serde(rename = "postOnly", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub post_only: Option<Option<bool>>,
}

impl UsersSubaccountSubaccountIdOrdersGet200ResponseResultOrdersInner {
    pub fn new(market_id: i32, side: Side, price: i32, qty: i32, created_at: i64, fills: Vec<models::UsersSubaccountSubaccountIdOrdersGet200ResponseResultOrdersInnerFillsInner>, modifies: Vec<models::UsersSubaccountSubaccountIdOrdersGet200ResponseResultOrdersInnerModifiesInner>, status: Status) -> UsersSubaccountSubaccountIdOrdersGet200ResponseResultOrdersInner {
        UsersSubaccountSubaccountIdOrdersGet200ResponseResultOrdersInner {
            order_id: None,
            market_id,
            side,
            price,
            qty,
            created_at,
            modified_at: None,
            canceled_at: None,
            filled_at: None,
            filled_total: None,
            fills,
            modifies,
            reason: None,
            settled: None,
            status,
            client_order_id: None,
            time_in_force: None,
            order_type: None,
            self_trade_prevention: None,
            cancel_on_disconnect: None,
            post_only: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "Bid")]
    Bid,
    #[serde(rename = "Ask")]
    Ask,
}

impl Default for Side {
    fn default() -> Side {
        Self::Bid
    }
}
/// The current status of this order. Note that if the order is `Open`, this is a best-effort estimation, and the order service has the most correct status.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "rejected")]
    Rejected,
    #[serde(rename = "filled")]
    Filled,
    #[serde(rename = "p-filled")]
    PFilled,
    #[serde(rename = "canceled")]
    Canceled,
}

impl Default for Status {
    fn default() -> Status {
        Self::Open
    }
}

