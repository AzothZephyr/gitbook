/*
 * Cube Iridium HTTP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@cube.exchange
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UsersSubaccountSubaccountIdTransfersGet200ResponseResultDepositsValueInnerInner {
    #[serde(rename = "assetId")]
    pub asset_id: i32,
    #[serde(rename = "amount")]
    pub amount: String,
    /// Deposits that are found on-chain will have a `txn_hash` and `txn_index`. If it is a pending deposit determined by some external payment system, these can be empty
    #[serde(rename = "txnHash", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub txn_hash: Option<Option<String>>,
    #[serde(rename = "txnIndex", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub txn_index: Option<Option<i64>>,
    /// When we first started tracking this deposit. Probably in the mempool.
    #[serde(rename = "createdAt")]
    pub created_at: String,
    /// If `txn_state` is `Confirmed` and `KytStatus` is accepted, this is the time that the deposit is credited. Otherwise, it is the last update (e.g if a kyt external id was created, or transaction state updated).
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
    /// The deposit is credited when `Confirmed` and accepted.
    #[serde(rename = "txnState")]
    pub txn_state: TxnState,
    /// The deposit source address
    #[serde(rename = "address", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub address: Option<Option<String>>,
    /// The estimated time that this deposit will transition to `Confirmed`. This is currently only applicable for `Received` deposits
    #[serde(rename = "timeEst")]
    pub time_est: String,
    #[serde(rename = "fiatToCrypto")]
    pub fiat_to_crypto: bool,
}

impl UsersSubaccountSubaccountIdTransfersGet200ResponseResultDepositsValueInnerInner {
    pub fn new(asset_id: i32, amount: String, created_at: String, updated_at: String, txn_state: TxnState, time_est: String, fiat_to_crypto: bool) -> UsersSubaccountSubaccountIdTransfersGet200ResponseResultDepositsValueInnerInner {
        UsersSubaccountSubaccountIdTransfersGet200ResponseResultDepositsValueInnerInner {
            asset_id,
            amount,
            txn_hash: None,
            txn_index: None,
            created_at,
            updated_at,
            txn_state,
            address: None,
            time_est,
            fiat_to_crypto,
        }
    }
}
/// The deposit is credited when `Confirmed` and accepted.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TxnState {
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "received")]
    Received,
    #[serde(rename = "confirmed")]
    Confirmed,
    #[serde(rename = "dropped")]
    Dropped,
    #[serde(rename = "failed")]
    Failed,
}

impl Default for TxnState {
    fn default() -> TxnState {
        Self::Pending
    }
}

