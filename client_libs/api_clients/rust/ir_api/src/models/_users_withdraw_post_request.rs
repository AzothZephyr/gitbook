/*
 * Cube Iridium HTTP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@cube.exchange
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UsersWithdrawPostRequest {
    /// The subaccount to withdraw from.
    #[serde(rename = "subaccountId")]
    pub subaccount_id: i32,
    /// The asset to withdraw. The network is determined by the asset ID.
    #[serde(rename = "assetId")]
    pub asset_id: i32,
    /// The amount to withdraw. This is denominated in the smallest unit of the asset (e.g. satoshis for BTC, wei for ETH, lamports for SOL). The amount must be greater than the dust limit for the asset.
    #[serde(rename = "amount")]
    pub amount: i32,
    /// The destination address for the withdrawal.
    #[serde(rename = "destination")]
    pub destination: String,
}

impl UsersWithdrawPostRequest {
    pub fn new(subaccount_id: i32, asset_id: i32, amount: i32, destination: String) -> UsersWithdrawPostRequest {
        UsersWithdrawPostRequest {
            subaccount_id,
            asset_id,
            amount,
            destination,
        }
    }
}

