/*
 * Cube Mendelev HTTP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@cube.exchange
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// BookMarketIdSnapshotGet200ResponseResultAnyOf1OrdersInner : A resting order.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BookMarketIdSnapshotGet200ResponseResultAnyOf1OrdersInner {
    #[serde(rename = "price")]
    pub price: i32,
    #[serde(rename = "quantity")]
    pub quantity: i32,
    /// [Exchange order ID](./websocket-trade-api.md#exchange-order-id)
    #[serde(rename = "exchangeOrderId")]
    pub exchange_order_id: i32,
    #[serde(rename = "side")]
    pub side: i32,
    /// Order priority for execution. Valid within a price level and side. That is, orders must first be sorted by side and price (in descending order for bids and ascending for asks), and then the OrderPriority within the level. A lower value is a higher priority.
    #[serde(rename = "priority")]
    pub priority: i32,
}

impl BookMarketIdSnapshotGet200ResponseResultAnyOf1OrdersInner {
    /// A resting order.
    pub fn new(price: i32, quantity: i32, exchange_order_id: i32, side: i32, priority: i32) -> BookMarketIdSnapshotGet200ResponseResultAnyOf1OrdersInner {
        BookMarketIdSnapshotGet200ResponseResultAnyOf1OrdersInner {
            price,
            quantity,
            exchange_order_id,
            side,
            priority,
        }
    }
}

