/*
 * Cube Mendelev HTTP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@cube.exchange
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TickersSnapshotGet200ResponseResultTopsInner : Top of book
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TickersSnapshotGet200ResponseResultTopsInner {
    #[serde(rename = "marketId")]
    pub market_id: i32,
    /// The [transact time](./websocket-trade-api.md#transact-time) of the latest book update on this market.
    #[serde(rename = "transactTime")]
    pub transact_time: i32,
    /// The best bid price.
    #[serde(rename = "bidPrice", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bid_price: Option<Option<i32>>,
    /// The total bid quantity at the best bid price.
    #[serde(rename = "bidQuantity", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bid_quantity: Option<Option<i32>>,
    /// The best ask price.
    #[serde(rename = "askPrice", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ask_price: Option<Option<i32>>,
    /// The total ask quantity at the best ask price.
    #[serde(rename = "askQuantity", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ask_quantity: Option<Option<i32>>,
    /// The last trade price.
    #[serde(rename = "lastPrice", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub last_price: Option<Option<i32>>,
    /// The 24h open price.
    #[serde(rename = "rolling24hPrice", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rolling24h_price: Option<Option<i32>>,
    #[serde(rename = "impliedBidPrice", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub implied_bid_price: Option<Option<i32>>,
    #[serde(rename = "impliedBidQuantity", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub implied_bid_quantity: Option<Option<i32>>,
    #[serde(rename = "impliedAskPrice", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub implied_ask_price: Option<Option<i32>>,
    #[serde(rename = "impliedAskQuantity", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub implied_ask_quantity: Option<Option<i32>>,
    #[serde(rename = "marketState")]
    pub market_state: i32,
}

impl TickersSnapshotGet200ResponseResultTopsInner {
    /// Top of book
    pub fn new(market_id: i32, transact_time: i32, market_state: i32) -> TickersSnapshotGet200ResponseResultTopsInner {
        TickersSnapshotGet200ResponseResultTopsInner {
            market_id,
            transact_time,
            bid_price: None,
            bid_quantity: None,
            ask_price: None,
            ask_quantity: None,
            last_price: None,
            rolling24h_price: None,
            implied_bid_price: None,
            implied_bid_quantity: None,
            implied_ask_price: None,
            implied_ask_quantity: None,
            market_state,
        }
    }
}

