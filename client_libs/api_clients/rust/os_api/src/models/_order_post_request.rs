/*
 * Cube Osmium HTTP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@cube.exchange
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OrderPostRequest : Place a new order.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderPostRequest {
    /// A unique order ID assigned by the client for this order. The ID must be unique among open orders by this subaccount.
    #[serde(rename = "clientOrderId")]
    pub client_order_id: i32,
    /// A request ID that is echoed back on the NewOrderAck or NewOrderReject
    #[serde(rename = "requestId")]
    pub request_id: i32,
    #[serde(rename = "marketId")]
    pub market_id: i32,
    #[serde(rename = "price", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub price: Option<Option<i32>>,
    #[serde(rename = "quantity")]
    pub quantity: i32,
    #[serde(rename = "side")]
    pub side: i32,
    #[serde(rename = "timeInForce")]
    pub time_in_force: i32,
    #[serde(rename = "orderType")]
    pub order_type: i32,
    /// The subaccount to place this order on. This subaccount must be writable by the API key specified in the Credentials message.
    #[serde(rename = "subaccountId")]
    pub subaccount_id: i32,
    #[serde(rename = "selfTradePrevention", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub self_trade_prevention: Option<Option<i32>>,
    #[serde(rename = "postOnly")]
    pub post_only: i32,
    /// If true, this order will be automatically cancelled after the closure of the network connection between Cube's servers and the client that placed the order.  If the client initiates the disconnect or network instability drops the connection, the order will be cancelled when Cube's servers recognize the disconnection.  In the event of a server-side disconnect that causes a halt in trading, such as scheduled downtime, the order will be cancelled before trading resumes.
    #[serde(rename = "cancelOnDisconnect")]
    pub cancel_on_disconnect: bool,
}

impl OrderPostRequest {
    /// Place a new order.
    pub fn new(client_order_id: i32, request_id: i32, market_id: i32, quantity: i32, side: i32, time_in_force: i32, order_type: i32, subaccount_id: i32, post_only: i32, cancel_on_disconnect: bool) -> OrderPostRequest {
        OrderPostRequest {
            client_order_id,
            request_id,
            market_id,
            price: None,
            quantity,
            side,
            time_in_force,
            order_type,
            subaccount_id,
            self_trade_prevention: None,
            post_only,
            cancel_on_disconnect,
        }
    }
}

