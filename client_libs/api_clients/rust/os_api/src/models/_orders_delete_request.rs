/*
 * Cube Osmium HTTP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@cube.exchange
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OrdersDeleteRequest : Cancel all resting orders, optionally limiting to a particular market and / or order book side.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrdersDeleteRequest {
    /// The subaccount to cancel orders for.
    #[serde(rename = "subaccountId")]
    pub subaccount_id: i32,
    /// A request ID that is echoed back on the MassCancelAck and individual CancelOrderAck's.
    #[serde(rename = "requestId")]
    pub request_id: i32,
    /// If specified, only orders on the corresponding market will be canceled.
    #[serde(rename = "marketId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub market_id: Option<Option<i32>>,
    /// If specified, only orders with this side will be canceled.
    #[serde(rename = "side", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub side: Option<Option<i32>>,
}

impl OrdersDeleteRequest {
    /// Cancel all resting orders, optionally limiting to a particular market and / or order book side.
    pub fn new(subaccount_id: i32, request_id: i32) -> OrdersDeleteRequest {
        OrdersDeleteRequest {
            subaccount_id,
            request_id,
            market_id: None,
            side: None,
        }
    }
}

