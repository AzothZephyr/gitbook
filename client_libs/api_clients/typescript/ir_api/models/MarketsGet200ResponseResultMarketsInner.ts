/**
 * Cube Iridium HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@cube.exchange
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';

/**
* A market is identified by its unique `marketId`. The market definition specifies specifies the base and quote assets and their respective lot sizes for the particular market.
*/
export class MarketsGet200ResponseResultMarketsInner {
    /**
    * The Cube-assigned market ID.
    */
    'marketId': number;
    /**
    * The market\'s symbol. Normally this is base symbol concatenated with the quote symbol.  e.g `BTCUSDC`
    */
    'symbol': string;
    /**
    * The asset ID of the base asset.
    */
    'baseAssetId': number;
    /**
    * The number of units of the base asset that are represented by one base lot.
    */
    'baseLotSize': string;
    /**
    * The asset ID of the quote asset.
    */
    'quoteAssetId': number;
    /**
    * The number of units of the quote asset that are represented by one quote lot.
    */
    'quoteLotSize': string;
    /**
    * The default number of decimal places to display for human-readable prices for this market.
    */
    'priceDisplayDecimals': number;
    'protectionPriceLevels': number;
    /**
    * The percentage that a new bid can be placed below the current reference price.
    */
    'priceBandBidPct'?: number | null;
    /**
    * The percentage that a new ask can be placed above the current reference price.
    */
    'priceBandAskPct'?: number | null;
    /**
    * The minimum order quantity lots for this market. Inclusive.
    */
    'minOrderQty'?: number | null;
    /**
    * The maximum order quantity lots for this market. Inclusive.
    */
    'maxOrderQty'?: number | null;
    /**
    * The human-readable minimum price increment.
    */
    'priceTickSize': string;
    /**
    * The human-readable minimum quantity increment.
    */
    'quantityTickSize': string;
    /**
    * ID of the fee table that will be used for lookups on this market.
    */
    'feeTableId': number;
    /**
    * If this is an implied market, this is the list of implied-through base markets. Otherwise, this is `None`.
    */
    'baseMarketIds'?: Array<number> | null;
    /**
    * If this market is currently enabled for implied matching, this will be `true`. Otherwise, this will be `false` or missing.
    */
    'isImplied': boolean;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "marketId",
            "baseName": "marketId",
            "type": "number",
            "format": "uint64"
        },
        {
            "name": "symbol",
            "baseName": "symbol",
            "type": "string",
            "format": ""
        },
        {
            "name": "baseAssetId",
            "baseName": "baseAssetId",
            "type": "number",
            "format": "uint64"
        },
        {
            "name": "baseLotSize",
            "baseName": "baseLotSize",
            "type": "string",
            "format": ""
        },
        {
            "name": "quoteAssetId",
            "baseName": "quoteAssetId",
            "type": "number",
            "format": "uint64"
        },
        {
            "name": "quoteLotSize",
            "baseName": "quoteLotSize",
            "type": "string",
            "format": ""
        },
        {
            "name": "priceDisplayDecimals",
            "baseName": "priceDisplayDecimals",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "protectionPriceLevels",
            "baseName": "protectionPriceLevels",
            "type": "number",
            "format": "uint64"
        },
        {
            "name": "priceBandBidPct",
            "baseName": "priceBandBidPct",
            "type": "number",
            "format": "uint32"
        },
        {
            "name": "priceBandAskPct",
            "baseName": "priceBandAskPct",
            "type": "number",
            "format": "uint32"
        },
        {
            "name": "minOrderQty",
            "baseName": "minOrderQty",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "maxOrderQty",
            "baseName": "maxOrderQty",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "priceTickSize",
            "baseName": "priceTickSize",
            "type": "string",
            "format": ""
        },
        {
            "name": "quantityTickSize",
            "baseName": "quantityTickSize",
            "type": "string",
            "format": ""
        },
        {
            "name": "feeTableId",
            "baseName": "feeTableId",
            "type": "number",
            "format": "uint64"
        },
        {
            "name": "baseMarketIds",
            "baseName": "baseMarketIds",
            "type": "Array<number>",
            "format": "uint64"
        },
        {
            "name": "isImplied",
            "baseName": "isImplied",
            "type": "boolean",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return MarketsGet200ResponseResultMarketsInner.attributeTypeMap;
    }

    public constructor() {
    }
}

