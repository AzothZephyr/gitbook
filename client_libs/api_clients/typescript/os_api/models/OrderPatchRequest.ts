/**
 * Cube Osmium HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@cube.exchange
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';

/**
* Modify a resting order. - If the `newPrice` and the current resting order\'s price is the same, and `newQuantity` is not greater, then the modify is considered a modify down, and the FIFO queue priority is maintained. Otherwise, the modify-order request is treated as an atomic cancel-replace and the replacement order is placed at the end of the FIFO queue for the new price level. - If post-only is specified and the replacement order would trade, then the request is rejected and the current resting order remains resting.  Currently, in-flight-mitigation (IFM) is always enabled. That is, the cumulative fill qty is subtracted from `newQuantity` to calculate the new resting quantity. For example:  ```text | Resting | Filled ---------+---------+-------- New 5    | 5       | 0 Fill 2   | 3       | 2 Modify 4 | 2       | 2 ```  The post-modify quantity will be `newQuantity - filled = 4 - 2 = 2`.  Regardless of IFM, the invariant for order quantity is that `quantity = remaining_quantity + cumulative_quantity`.
*/
export class OrderPatchRequest {
    'marketId': number;
    /**
    * The order ID specified by the client on the NewOrder request.
    */
    'clientOrderId': number;
    /**
    * A request ID that is echoed back on the ModifyOrderAck or ModifyOrderReject
    */
    'requestId': number;
    'newPrice': number;
    'newQuantity': number;
    /**
    * The subaccount that the NewOrder was placed on.
    */
    'subaccountId': number;
    'selfTradePrevention'?: number | null;
    'postOnly': number;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "marketId",
            "baseName": "marketId",
            "type": "number",
            "format": "uint64"
        },
        {
            "name": "clientOrderId",
            "baseName": "clientOrderId",
            "type": "number",
            "format": "uint64"
        },
        {
            "name": "requestId",
            "baseName": "requestId",
            "type": "number",
            "format": "uint64"
        },
        {
            "name": "newPrice",
            "baseName": "newPrice",
            "type": "number",
            "format": "uint64"
        },
        {
            "name": "newQuantity",
            "baseName": "newQuantity",
            "type": "number",
            "format": "uint64"
        },
        {
            "name": "subaccountId",
            "baseName": "subaccountId",
            "type": "number",
            "format": "uint64"
        },
        {
            "name": "selfTradePrevention",
            "baseName": "selfTradePrevention",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "postOnly",
            "baseName": "postOnly",
            "type": "number",
            "format": "int32"
        }    ];

    static getAttributeTypeMap() {
        return OrderPatchRequest.attributeTypeMap;
    }

    public constructor() {
    }
}

